<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
    <!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java -->
    <bean id="runoobRealm" class="com.ssm.runoob.shiro.RunoobRealm"/>

    <!-- session 保存到cookie，关闭浏览器下次可以直接登录认证，当maxAge为-1不会写cookie。-->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="sid"/>
        <property name="httpOnly" value="true"/>
        <!-- 浏览器关闭session失效，不计入cookie -->
        <property name="maxAge" value="-1"/>
    </bean>

    <!--  记住我功能，当关闭浏览器下次再访问的时候不需要登录也能查看。只对filterChainDefinitions设置为user级别的链接有效，
            类似于淘宝看商品、添加购物车，不需要验证是否登录。但是提交订单就必须登录。
       -->
    <!--<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">-->
    <!--<constructor-arg value="rememberMe"/>-->
    <!--<property name="httpOnly" value="true"/>-->
    <!--<property name="maxAge" value="2592000"/>&lt;!&ndash; 30天 &ndash;&gt;-->
    <!--</bean>-->
    <!--<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">-->
    <!--<property name="cookie" ref="rememberMeCookie"/>-->
    <!--&lt;!&ndash; aes key。shiro默认的key是不安全的,可以使用工程utils包的GenerateAESKey生成一个自定义的key&ndash;&gt;-->
    <!--<property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('XgGkgqGqYrix9lI6vxcrRw==')}"/>-->
    <!--</bean>-->


    <!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->
    <!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->
    <bean id="sessionManager"
          class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="sessionDAO" ref="sessionDAO"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
        <property name="deleteInvalidSessions" value="true"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>
    </bean>

    <!-- 自定义shiro的sessionDao，把session写入redis -->
    <bean id="sessionDAO" class="com.zhm.ssr.shiro.RedisSessionDao">
        <constructor-arg ref="redisTemplate" />
        <constructor-arg value="${redis.expireTime}" />
    </bean>
    <!--<bean id="redisCacheManager" class="com.zhm.ssr.shiro.RedisCacheManager" >-->
    <!--<property name="redisManager" ref="redisManager" />-->
    <!--</bean>-->

    <!--<bean id="redisManager" class="com.zhm.ssr.shiro.RedisManager">-->
    <!--<property name="expire" value="${redis.expireTime}" />-->
    <!--<property name="host" value="${redis.host}" />-->
    <!--<property name="password" value="${redis.pass}" />-->
    <!--<property name="port" value="${redis.port}" />-->
    <!--<property name="timeout" value="${redis.maxWait}" />-->
    <!--</bean>-->
    <!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="runoobRealm"/>
        <!-- shiro使用redis缓存 -->
        <property name="sessionManager" ref="sessionManager"/>
        <!--<property name="cacheManager" ref="redisCacheManager"/>-->
        <!-- 客户端勾选记住 -->
        <!--<property name="rememberMeManager" ref="rememberMeManager"/>-->
    </bean>

    <!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
    <!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- Shiro的核心安全接口,这个属性是必须的 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
        <property name="loginUrl" value="/login"/>
        <!-- 登录成功后要跳转的连接(本例中此属性用不到,因为登录成功后的处理逻辑在LoginController里硬编码为main.jsp了) -->
        <!-- <property name="successUrl" value="/system/main"/> -->
        <!-- 用户访问未对其授权的资源时,所显示的连接 -->
        <!-- 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用[玄玉]登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp -->
        <property name="unauthorizedUrl" value="/unauthor.jsp"/>
        <!-- Shiro连接约束配置,即过滤链的定义 -->
        <!-- 此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->
        <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->
        <!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->
        <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->
        <property name="filters">
            <util:map>
                <!--要求登录-->
                <entry key="authc">
                    <bean class="org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter"/>
                </entry>
                <entry key="roles">
                    <!--自定义验证过滤器-->
                    <bean class="com.ssm.runoob.shiro.UserPermsFilter"/>
                </entry>
            </util:map>
        </property>
        <!--<property name="filterChainDefinitions">-->
        <!--<value>-->
        <!--/favicon.ico = anon-->
        <!--/login = anon-->
        <!--/logout = logout-->
        <!--&lt;!&ndash;/test/** = roles["管理员"]&ndash;&gt;-->
        <!--</value>-->
        <!--</property>-->
        <property name="filterChainDefinitionMap" ref="dynamicFilterChainDefinitions"/>
    </bean>
    <!--&lt;!&ndash;动态权限配置 读数据库&ndash;&gt;-->
    <bean id="dynamicFilterChainDefinitions" class="com.ssm.runoob.shiro.DynamicFilterChainDefinitions">
        <property name="filterChainDefinitions">
            <value>
                <!--转移至shiro.ini 但是此处不能为空 -->
                /favicon.ico = anon
                <!--&lt;!&ndash;/login = anon&ndash;&gt;-->
                <!--&lt;!&ndash;/logout = logout&ndash;&gt;-->
                <!--&lt;!&ndash;/test/** = roles["管理员"]&ndash;&gt;-->
            </value>
        </property>
    </bean>

    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <!--<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>-->

    <!-- 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->
    <!-- 配置以下两个bean即可实现此功能 -->
    <!-- Enable Shiro Annotations for Spring-configured beans. Only run after the lifecycleBeanProcessor has run -->
    <!-- 由于本例中并未使用Shiro注解,故注释掉这两个bean(个人觉得将权限通过注解的方式硬编码在程序中,查看起来不是很方便,没必要使用) -->
    <!--
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
     -->
</beans>