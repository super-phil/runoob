<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <context:component-scan base-package="com.ssm.runoob.controller">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/html;charset=UTF-8</value>
                        <value>application/json</value>
                    </list>
                </property>
                <property name="features">
                    <array>
                        <value>WriteMapNullValue</value>
                        <value>WriteNullStringAsEmpty</value>
                    </array>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    <!-- fastjson与SpringMVC整合 -->
    <!--
    1)若按照jackson和SpringMVC的整合方式,应按照下面的写法,但测试发现这样会报告"HTTP Status 406"
      The resource identified by this request is only capable of generating responses
      with characteristics not acceptable according to the request "accept" headers.
    2)测试通过的整合方式为上面那样在mvc:annotation-driven里面进行注册
    3)supportedMediaTypes增加[text/html;charset=UTF-8]值,是为了兼容IE6
      否则[application/json]值在IE6中会导致弹出对话框询问是否保存文件,而firefox等高级浏览器会正常打印json字符串
    4)若像下面这样给supportedMediaTypes属性赋两个值[text/html;charset=UTF-8]和[application/json],则[application/json]是无效的
      因为此时应答给浏览器(或者说请求方)的Content-Type头信息都是[text/html;charset=UTF-8],所以给它一个值就行了
      如果给supportedMediaTypes的值为[application/json],则应答给浏览器的Content-Type头信息就是[application/json;charset=UTF-8]
    5)关于features属性,不是serializerFeature,而是features,详见FastJsonHttpMessageConverter.java
      它是用来控制json序列化输出时的一些额外属性,比如说该字段是否输出、输出时key使用单引号还是双引号、key不使用任何引号等等
      QuoteFieldNamesc 输出key时是否使用双引号,默认为true
      WriteMapNullValue 是否输出值为null的字段,默认为false
      WriteNullNumberAsZero 数值字段如果为null,输出为0,而非null
      WriteNullListAsEmpty List字段如果为null,输出为[],而非null
      WriteNullStringAsEmpty 字符类型字段如果为null,输出为"",而非null
      WriteNullBooleanAsFalse Boolean字段如果为null,输出为false,而非null
    6)通常在网上搜到的fastjson和springMVC整合的例子中都像下面注释的代码那样给了两个属性WriteMapNullValue和QuoteFieldNames
      这就表示为json解析器设置QuoteFieldNames和WriteMapNullValue的值为true,即输出时key使用双引号,同时也输出值为null的字段
    7)输出时某字段为String类型,且值为null,此时若需要其输出,且输出值为空字符串,则需同时赋值WriteMapNullValue和WriteNullStringAsEmpty
      经测试,若只赋值WriteNullStringAsEmpty,则不会输出该字段..加上WriteMapNullValue属性后,便输出了,且输出值不是null,而是预期的空字符串
     -->
    <!--1、重定向-->
    <mvc:view-controller path="/" view-name="redirect:/test/index"/>
    <!--即如果当前路径是/ 则重定向到/admin/index-->

    <!--2、view name-->
    <!--<mvc:view-controller path="/" view-name=admin/index"/>-->
    <!--如果当前路径是/ 则交给相应的视图解析器直接解析为视图-->
    <!--拦截器 -->
    <mvc:interceptors>
        <!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 包括资源文件路径 -->
        <bean class="com.ssm.runoob.interceptor.TestAllInterceptor"/>
        <mvc:interceptor>
            <mvc:mapping path="/test/**"/>
            <!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 -->
            <bean class="com.ssm.runoob.interceptor.TestInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>


    <!--freemarker的配置 -->
    <bean id="freemarkerConfigurer"
          class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value="/WEB-INF/views/"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="freemarkerSettings">
            <props>
                <prop key="template_update_delay">10</prop>
                <prop key="locale">zh_CN</prop>
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
                <prop key="date_format">yyyy-MM-dd</prop>
                <prop key="number_format">#.##</prop>
            </props>
        </property>
    </bean>
    <!--FreeMarker视图解析 如返回userinfo。。在这里配置后缀名ftl和视图解析器。。-->
    <bean id="freeMarkerViewResolver"
          class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="suffix" value=".ftl"/>
        <property name="contentType" value="text/html;charset=UTF-8"/>
        <property name="exposeRequestAttributes" value="true"/>
        <property name="exposeSessionAttributes" value="true"/>
        <property name="exposeSpringMacroHelpers" value="true"/>
        <!--<property name="cache" value="true"/>-->
        <property name="order" value="1"/>
    </bean>
    <!--velocity的配置 -->
    <bean id="velocityConfig" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
        <property name="resourceLoaderPath" value="/WEB-INF/views/"/>
        <property name="velocityProperties">
            <props>
                <prop key="input.encoding">utf-8</prop>
                <prop key="output.encoding">utf-8</prop>
            </props>
        </property>
    </bean>
    <!--velocity视图解析 如返回userinfo。。在这里配置后缀名vm和视图解析器。。-->
    <bean id="velocityViewResolver" class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
        <property name="suffix" value=".vm"/>
        <property name="contentType" value="text/html;charset=utf-8"/>
        <property name="cache" value="true"/>
        <property name="order" value="2"/>
    </bean>
    <!-- 默认视图模式配置-->
    <bean id="defaultViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="contentType" value="text/html;charset=utf-8"/>
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
        <property name="order" value="3"/>
    </bean>
    <!--静态资源访问-->
    <mvc:resources mapping="/assets/**" location="/assets/"/>
    <mvc:resources mapping="/*.ico" location="/"/>
    <!--全局异常-->
    <bean class="com.ssm.runoob.exception.RunoobExceptionResolver"/>
    <!--国际化-->
    <!-- 定义国际化消息
              说明:只会在servlet做出响应,所以加载信息应该放置在servlet中.
       -->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">

        <!-- 其中basename用来指定properties文件的通用名
                 如实例中的messages_en.properties,messages_ja.properties通用名都是messages
         -->
        <property name="basename" value="messages" />
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="useCodeAsDefaultMessage" value="true" />

    </bean>
    <!-- 配置基于Session的处理,将提交上来的locale参数进行处理 -->
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
        <!-- 该属性可以不用配置 -->
        <property name="defaultLocale" value="zh"/>
    </bean>

    <!-- 国际化请求拦截器处理 -->
    <mvc:interceptors>
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />
    </mvc:interceptors>
    <!-- 基于Cookie的本地化解析器 -->
    <!--<bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">-->
        <!--<property name="cookieMaxAge" value="604800"/>-->
        <!--<property name="defaultLocale" value="zh"/>-->
        <!--<property name="cookieName" value="Language"/>-->
    <!--</bean>-->
    <!--文件上传-->
    <bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="104857600"/>
        <property name="maxInMemorySize" value="4096"/>
        <property name="defaultEncoding" value="UTF-8"/>
    </bean>
</beans>