package com.ssm.runoob.dao;

import com.ssm.runoob.model.Privilege;
import org.apache.ibatis.annotations.Param;

import java.util.List;

/**
 * The interface Privilege mapper.
 */
public interface PrivilegeMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table privilege
     *
     * @param id the id
     * @return the int
     * @mbggenerated
     */
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table privilege
     *
     * @param record the record
     * @return the int
     * @mbggenerated
     */
    int insert(Privilege record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table privilege
     *
     * @param record the record
     * @return the int
     * @mbggenerated
     */
    int insertSelective(Privilege record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table privilege
     *
     * @param id the id
     * @return the privilege
     * @mbggenerated
     */
    Privilege selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table privilege
     *
     * @param record the record
     * @return the int
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(Privilege record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table privilege
     *
     * @param record the record
     * @return the int
     * @mbggenerated
     */
    int updateByPrimaryKey(Privilege record);

    /**
     * Find by query and order by list.
     *
     * @param search the search
     * @param order  the order
     * @param start  the start
     * @param length the length
     * @return the list
     */
    List<Privilege> findByQueryAndOrderBy(@Param("search") String search, @Param("order") String order, @Param("start") int start, @Param("length") int length);

    /**
     * Count long.
     *
     * @return the long
     */
    long count();

    /**
     * Count by query long.
     *
     * @param search the search
     * @return the long
     */
    long countByQuery(@Param("search") String search);

    /**
     * Find by name privilege.
     *
     * @param pName the p name
     * @return the privilege
     */
    Privilege findByName(@Param("pName") String pName);

    /**
     * Find by pid list.
     *
     * @param pid the pid
     * @return the list
     */
    List<Privilege> findByPID(@Param("pid") long pid);

    /**
     * Remove r passign by pid int.
     *
     * @param id the id
     * @return the int
     */
    int removeRPassignByPID(@Param("id") long id);
}