package com.ssm.runoob.dao;

import com.ssm.runoob.model.Role;
import com.ssm.runoob.model.RolePrivilege;
import org.apache.ibatis.annotations.Param;

import java.util.List;

/**
 * The interface Role mapper.
 */
public interface RoleMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table role
     *
     * @param id the id
     * @return the int
     * @mbggenerated
     */
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table role
     *
     * @param record the record
     * @return the int
     * @mbggenerated
     */
    int insert(Role record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table role
     *
     * @param record the record
     * @return the int
     * @mbggenerated
     */
    int insertSelective(Role record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table role
     *
     * @param id the id
     * @return the role
     * @mbggenerated
     */
    Role selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table role
     *
     * @param record the record
     * @return the int
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(Role record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table role
     *
     * @param record the record
     * @return the int
     * @mbggenerated
     */
    int updateByPrimaryKey(Role record);

    /**
     * Find by query and order by list.
     *
     * @param search the search
     * @param order  the order
     * @param start  the start
     * @param length the length
     * @return the list
     */
    List<Role> findByQueryAndOrderBy(@Param("search") String search, @Param("order") String order, @Param("start") int start, @Param("length") int length);

    /**
     * Count long.
     *
     * @return the long
     */
    long count();

    /**
     * Count by query long.
     *
     * @param search the search
     * @return the long
     */
    long countByQuery(@Param("search") String search);

    /**
     * Insert assign int.
     *
     * @param rps the rps
     * @return the int
     */
    int insertAssign(@Param("rps") List<RolePrivilege> rps);

    /**
     * Remove rp assign all by rid int.
     *
     * @param rid the rid
     * @return the int
     */
    int removeRPAssignAllByRID(@Param("rid") Long rid);

    /**
     * Remove ur assign all by rid int.
     *
     * @param rid the rid
     * @return the int
     */
    int removeURAssignAllByRID(@Param("rid") Long rid);

    /**
     * Gets all.
     *
     * @return the all
     */
    List<Role> getAll();

    /**
     * Gets all role privilege.
     *
     * @return the all role privilege
     */
    List<Role> getAllRolePrivilege();
}